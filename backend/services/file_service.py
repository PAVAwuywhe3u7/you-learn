import os
import tempfile
from datetime import datetime
from typing import List, Dict
from reportlab.lib.pagesizes import letter, A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak
from reportlab.lib.enums import TA_LEFT, TA_CENTER
from docx import Document
from docx.shared import Inches
from docx.enum.text import WD_ALIGN_PARAGRAPH

class FileService:
    def __init__(self):
        self.temp_dir = tempfile.gettempdir()

    def generate_pdf(self, video_title: str, summary_data: List[Dict[str, str]]) -> str:
        """Generate PDF file with video summary"""
        # Create temporary file
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"summary_{timestamp}.pdf"
        filepath = os.path.join(self.temp_dir, filename)

        # Create PDF document
        doc = SimpleDocTemplate(
            filepath,
            pagesize=A4,
            rightMargin=72,
            leftMargin=72,
            topMargin=72,
            bottomMargin=18
        )

        # Get styles
        styles = getSampleStyleSheet()

        # Custom styles
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=18,
            spaceAfter=30,
            alignment=TA_CENTER,
            textColor='#2563eb'
        )

        heading_style = ParagraphStyle(
            'CustomHeading',
            parent=styles['Heading2'],
            fontSize=14,
            spaceAfter=12,
            spaceBefore=20,
            textColor='#1f2937'
        )

        bullet_style = ParagraphStyle(
            'BulletPoint',
            parent=styles['Normal'],
            fontSize=11,
            spaceAfter=8,
            leftIndent=20,
            bulletIndent=10,
            bulletFontName='Symbol'
        )

        # Build content
        story = []

        # Title
        story.append(Paragraph(f"Video Summary: {video_title}", title_style))
        story.append(Spacer(1, 12))

        # Generated date
        date_str = datetime.now().strftime("%B %d, %Y at %I:%M %p")
        story.append(Paragraph(f"Generated on {date_str}", styles['Normal']))
        story.append(Spacer(1, 20))

        # Summary content
        if summary_data:
            current_section = None

            for item in summary_data:
                section = item.get('section', 'Summary')
                point = item.get('point', '')

                # Add section heading if it's a new section
                if section != current_section:
                    if current_section is not None:
                        story.append(Spacer(1, 12))
                    story.append(Paragraph(section, heading_style))
                    current_section = section

                # Add bullet point
                if point:
                    bullet_text = f"â€¢ {point}"
                    story.append(Paragraph(bullet_text, bullet_style))
        else:
            story.append(Paragraph("No summary available.", styles['Normal']))

        # Footer
        story.append(Spacer(1, 30))
        footer_style = ParagraphStyle(
            'Footer',
            parent=styles['Normal'],
            fontSize=9,
            alignment=TA_CENTER,
            textColor='#6b7280'
        )
        story.append(Paragraph("Generated by You Learn - YouTube Video Summarizer", footer_style))

        # Build PDF
        doc.build(story)

        return filepath

    def generate_doc(self, video_title: str, summary_data: List[Dict[str, str]]) -> str:
        """Generate DOC file with video summary"""
        # Create temporary file
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"summary_{timestamp}.docx"
        filepath = os.path.join(self.temp_dir, filename)

        # Create document
        doc = Document()

        # Set document margins
        sections = doc.sections
        for section in sections:
            section.top_margin = Inches(1)
            section.bottom_margin = Inches(1)
            section.left_margin = Inches(1)
            section.right_margin = Inches(1)

        # Title
        title = doc.add_heading(f'Video Summary: {video_title}', 0)
        title.alignment = WD_ALIGN_PARAGRAPH.CENTER

        # Generated date
        date_str = datetime.now().strftime("%B %d, %Y at %I:%M %p")
        date_para = doc.add_paragraph(f'Generated on {date_str}')
        date_para.alignment = WD_ALIGN_PARAGRAPH.CENTER

        # Add spacing
        doc.add_paragraph()

        # Summary content
        if summary_data:
            current_section = None

            for item in summary_data:
                section = item.get('section', 'Summary')
                point = item.get('point', '')

                # Add section heading if it's a new section
                if section != current_section:
                    if current_section is not None:
                        doc.add_paragraph()  # Add spacing
                    doc.add_heading(section, level=1)
                    current_section = section

                # Add bullet point
                if point:
                    bullet_para = doc.add_paragraph()
                    bullet_para.style = 'List Bullet'
                    bullet_para.add_run(point)
        else:
            doc.add_paragraph("No summary available.")

        # Footer
        doc.add_paragraph()
        footer = doc.add_paragraph("Generated by You Learn - YouTube Video Summarizer")
        footer.alignment = WD_ALIGN_PARAGRAPH.CENTER

        # Save document
        doc.save(filepath)

        return filepath

    def cleanup_file(self, filepath: str):
        """Clean up temporary file"""
        try:
            if os.path.exists(filepath):
                os.remove(filepath)
        except Exception as e:
            print(f"Error cleaning up file {filepath}: {e}")